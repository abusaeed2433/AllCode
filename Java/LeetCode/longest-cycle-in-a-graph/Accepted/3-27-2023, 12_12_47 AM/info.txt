{"id":922586695,"lang":"java","lang_name":"Java","time":"3 days, 21 hours","timestamp":1679854367,"status":10,"status_display":"Accepted","runtime":"102 ms","url":"/submissions/detail/922586695/","is_pending":"Not Pending","title":"Longest Cycle in a Graph","memory":"83.6 MB","code":"//can't do right now\nclass Solution {\n    private int ans = -1;\n    private Map<Integer,Integer> map;\n    private boolean[] visited;\n    private int[] edges;\n    private int n;\n\n    public int longestCycle(int[] edges) {\n        n = edges.length;\n        this.edges = edges;\n        visited = new boolean[n];\n\n        for (int i = 0; i < n; i++) {\n            if(visited[i]) continue;\n\n            map = new HashMap<>();\n            map.put(i,1);\n            dfs(i);\n        }\n\n        return ans;\n    }\n\n    private void dfs(int sIndex){\n        visited[sIndex] = true;\n        \n        int ind = edges[sIndex];\n        if(ind == -1) return;\n\n        if(visited[ind]){\n            if(map.get(ind) == null) return;\n            ans = Math.max(ans,map.get(sIndex)+1-map.get(ind));\n            return;\n        }\n        map.put(ind, map.get(sIndex)+1);\n        dfs(ind);\n    }\n\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-cycle-in-a-graph","has_notes":false}