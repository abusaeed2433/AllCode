{"id":896464328,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1676194543,"status":10,"status_display":"Accepted","runtime":"54 ms","url":"/submissions/detail/896464328/","is_pending":"Not Pending","title":"Minimum Fuel Cost to Report to the Capital","memory":"106.3 MB","code":"class Solution {\n    private long ans = 0, seats;\n    private List<Integer>[] adj;\n    public long minimumFuelCost(int[][] roads, int seats) {\n        this.seats = seats;\n        int n = roads.length + 1;\n\n        adj = new ArrayList[n];\n\n        for(int[] road : roads){\n            if( adj[ road[0] ] == null) adj[ road[0] ] = new ArrayList<>();\n            if( adj[ road[1] ] == null) adj[ road[1] ] = new ArrayList<>();\n\n            adj[ road[0] ].add(road[1]);\n            adj[ road[1] ].add(road[0]);\n        }\n\n\n        dfs(0,-1);\n        return ans;\n    }\n\n    private long dfs(int node, int par){\n        \n        int count = 1;\n\n        if(adj[node] == null || adj[node].isEmpty()) return 1;\n\n        for(int child : adj[node]){\n            if( child != par){\n                count += dfs(child,node);\n            }\n        }\n\n        if(node != 0){\n            ans += Math.ceil((double)count/seats);\n        }\n\n        return count;\n\n    }\n\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-fuel-cost-to-report-to-the-capital","has_notes":false}