{"id":910777958,"lang":"java","lang_name":"Java","time":"2 weeks, 2 days","timestamp":1678186624,"status":10,"status_display":"Accepted","runtime":"357 ms","url":"/submissions/detail/910777958/","is_pending":"Not Pending","title":"Minimum Time to Complete Trips","memory":"55.6 MB","code":"class Solution {\n    private int[] arr;\n    private int tt,n;\n    public long minimumTime(int[] time, int tt) {\n        this.arr = time;\n        this.tt = tt;\n        n = time.length;\n\n        Arrays.sort(time);    \n        long l = 1, h = 0;\n        for(int n : time){\n            h = Math.max(h,n);\n        }\n        //System.out.println(h);\n        h *= tt;        \n        //System.out.println(h);\n        // System.out.println(isEnough(1036368));\n        // long m = 64773060227L;\n        // System.out.println(isEnough(m));\n        \n        while(l <= h){\n            long mid = (l+h)/2;\n            //System.out.print(l+\"+\"+h+\" = \"+mid);\n            if(isEnough(mid)){\n                //System.out.println(\" true\");\n                h = mid-1;\n            }\n            else{\n                //System.out.println(\" false\");\n                l = mid+1;\n            }\n        }\n\n        \n\n        return l;\n    }\n\n    private boolean isEnough(long time){\n        long count = 0;\n        int i=0;\n        while(i<n){\n            long tmp = time/arr[i];\n            if(tmp == 0) break;\n            count += tmp;\n            i++;\n        }\n\n        return count >= tt;\n\n    }\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-time-to-complete-trips","has_notes":false}