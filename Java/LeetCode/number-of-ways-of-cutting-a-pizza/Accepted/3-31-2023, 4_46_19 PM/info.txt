{"id":925322804,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1680259579,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/925322804/","is_pending":"Not Pending","title":"Number of Ways of Cutting a Pizza","memory":"40.3 MB","code":"class Solution {\n    //copied. vallagena\n    public int ways(String[] pizza, int k) {\n        int rows = pizza.length, cols = pizza[0].length();\n        int apples[][] = new int[rows + 1][cols + 1];\n        int dp[][][] = new int[k][rows][cols];\n        for (int row = rows - 1; row >= 0; row--) {\n            for (int col = cols - 1; col >= 0; col--) {\n                apples[row][col] = (pizza[row].charAt(col) == 'A' ? 1 : 0) + apples[row + 1][col] + apples[row][col + 1]\n                        - apples[row + 1][col + 1];\n                dp[0][row][col] = apples[row][col] > 0 ? 1 : 0;\n            }\n        }\n        int mod = 1000000007;\n        for (int remain = 1; remain < k; remain++) {\n            for (int row = 0; row < rows; row++) {\n                for (int col = 0; col < cols; col++) {\n                    for (int next_row = row + 1; next_row < rows; next_row++) {\n                        if (apples[row][col] - apples[next_row][col] > 0) {\n                            dp[remain][row][col] += dp[remain - 1][next_row][col];\n                            dp[remain][row][col] %= mod;\n                        }\n                    }\n                    for (int next_col = col + 1; next_col < cols; next_col++) {\n                        if (apples[row][col] - apples[row][next_col] > 0) {\n                            dp[remain][row][col] += dp[remain - 1][row][next_col];\n                            dp[remain][row][col] %= mod;\n                        }\n                    }\n                }\n            }\n        }\n        return dp[k - 1][0][0];\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-of-cutting-a-pizza","has_notes":false}