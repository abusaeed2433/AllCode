{"id":900797209,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1676787871,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/900797209/","is_pending":"Not Pending","title":"Merge Intervals","memory":"47.2 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        \n        List<int[]> ans = new ArrayList<>();\n        Arrays.sort(intervals, (o1,o2) -> o1[0]-o2[0]);\n\n        int i = 0, n = intervals.length;\n\n        while( i < n ){\n            int j = i+1;\n            while( j < n ){\n                if(intervals[i][1] >= intervals[j][0]){\n                    intervals[i][1] = Math.max(intervals[i][1],intervals[j][1]);\n                    j++;\n                }\n                else{\n                    break;\n                }\n            }\n            ans.add(intervals[i]);\n            i = j;\n        }        \n        return ans.toArray(new int[ans.size()][]);\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false}