{"id":921703768,"lang":"java","lang_name":"Java","time":"5 days, 8 hours","timestamp":1679728160,"status":10,"status_display":"Accepted","runtime":"107 ms","url":"/submissions/detail/921703768/","is_pending":"Not Pending","title":"Count Unreachable Pairs of Nodes in an Undirected Graph","memory":"123 MB","code":"class Solution {\n    private Map<Integer,List<Integer>> map = new HashMap<>();\n    private boolean[] visited;\n\n    public long countPairs(int n, int[][] connections) {\n        int cables = connections.length;\n        visited = new boolean[n];\n\n        for(int[] cbl : connections){\n            map.computeIfAbsent(cbl[0],k-> new ArrayList<>()).add(cbl[1]);\n            map.computeIfAbsent(cbl[1],k-> new ArrayList<>()).add(cbl[0]);\n        }\n        \n        long prev = 0, ans = 0;\n        for(int i=0;i<n;i++){\n            if(visited[i]) continue;\n            \n            long val = dfs(i,0);\n            if(prev != 0){\n                ans += prev * val;\n            }\n            prev += val;\n        }        \n        return ans;\n    }\n\n    private long dfs(int sIndex,long ans){\n        ans++;\n        visited[sIndex] = true;        \n        for(int pc : map.getOrDefault(sIndex,new ArrayList<>())){\n            if(visited[pc]) continue;\n            visited[pc] = true;\n            ans += dfs(pc,0);\n        }\n        return ans;\n    }\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-unreachable-pairs-of-nodes-in-an-undirected-graph","has_notes":false}