{"id":882594484,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1674324994,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/882594484/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"48 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        \n        ArrayList<Integer> num1 = new ArrayList<>();\n        ArrayList<Integer> num2 = new ArrayList<>();\n\n        while(l1 != null || l2 != null){\n            if(l1 != null){\n                num1.add(l1.val);\n                l1 = l1.next;\n            }\n            if(l2 != null){\n                num2.add(l2.val);\n                l2 = l2.next;\n            }\n        }\n\n        ListNode ans = null, last = null;\n        int mx = Math.max(num1.size(),num2.size());\n        int n1 = 0, n2 = 0, n, rem = 0;\n\n        for(int i=0; i < mx; i++){\n            if(i < num1.size()) n1 = num1.get(i);\n            if(i < num2.size()) n2 = num2.get(i);\n\n            n = n1 + n2 + rem;\n            \n            ListNode tmp = new ListNode();\n            tmp.val = n%10;\n\n            if( ans == null)\n                ans = tmp;\n            else\n                last.next = tmp;\n            last = tmp;\n            rem = n/10;\n            n1 = n2 = 0;\n        }\n\n        if(rem != 0){\n            ListNode tmp = new ListNode();\n            tmp.val = rem;\n            last.next = tmp;\n        }\n        return ans;\n    }\n}","compare_resulttitle_slug":"add-two-numbers","has_notes":false}