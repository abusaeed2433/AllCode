{"id":911464568,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1678281397,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/911464568/","is_pending":"Not Pending","title":"Kth Largest Sum in a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public long kthLargestLevelSum(TreeNode root, int k) {\n        List<Integer> sms = new ArrayList<>();        \n        Queue<TreeNode> q = new LinkedList<>();\n        q.add(root);\n        //sms.add(root.val);\n        \n        while(!q.isEmpty()){\n            int siz = q.size();\n            int sm = 0;\n            while(siz-- >0){\n                TreeNode tmp = q.poll();\n                sm += tmp.val;\n                \n                if(tmp.left != null) q.add(tmp.left);\n                if(tmp.right != null) q.add(tmp.right);\n            }\n            sms.add(sm);\n        }\n        Collections.sort(sms);\n        Collections.reverse(sms);\n        // for(int n : sms){\n        //     System.out.print(n+\" \");\n        // }\n        if(k > sms.size()-1) return -1;\n        return sms.get(k-1);\n    }\n}","compare_result":"111111111111101111111111110111111101101010101","title_slug":"kth-largest-sum-in-a-binary-tree","has_notes":false}