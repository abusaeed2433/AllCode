{"id":911311017,"lang":"java","lang_name":"Java","time":"2 weeks, 1 day","timestamp":1678258410,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/911311017/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"43.4 MB","code":"class Solution {\n    private int[] piles;\n    private int n;\n    private int hh;\n    public int minEatingSpeed(int[] piles, int hh) {\n        this.piles = piles;\n        this.n = piles.length;\n        this.hh = hh;\n\n        Arrays.sort(piles);\n        int l = 1, h = 0;\n        for(int bn : piles){\n            h = Math.max(h,bn);\n        }\n    \n        \n        while(l <= h){\n            int mid = (l+h)/2;\n            // System.out.print(l +\" \"+h+\" \"+mid+\" \");\n            if(isPossible(mid)){\n                h = mid-1;\n                // System.out.println(\"true\");\n            }\n            else{\n                l = mid+1;\n                // System.out.println(\"false\");\n            }\n        }\n\n        return l;        \n    }\n\n    private boolean isPossible(int k){\n        long tm = 0;\n        for(int i=n-1; i>=0; i--){\n            int tmp = piles[i] / k + (piles[i]%k == 0 ? 0 : 1);\n            tm += tmp;\n            if(tmp <= 1){\n                tm += i;\n                break;\n            }\n\n        }\n        return tm <= hh;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas","has_notes":false}