{"id":922574113,"lang":"java","lang_name":"Java","time":"3 days, 21 hours","timestamp":1679853004,"status":10,"status_display":"Accepted","runtime":"100 ms","url":"/submissions/detail/922574113/","is_pending":"Not Pending","title":"Longest Cycle in a Graph","memory":"85.2 MB","code":"//can't do right now\nclass Solution {\n    int answer = -1;\n\n    public void dfs(int node, int[] edges, Map<Integer, Integer> dist, boolean[] visit) {\n        visit[node] = true;\n        int neighbor = edges[node];\n\n        if (neighbor != -1 && !visit[neighbor]) {\n            dist.put(neighbor, dist.get(node) + 1);\n            dfs(neighbor, edges, dist, visit);\n        } else if (neighbor != -1 && dist.containsKey(neighbor)) {\n            answer = Math.max(answer, dist.get(node) - dist.get(neighbor) + 1);\n        }\n    }\n\n    public int longestCycle(int[] edges) {\n        int n = edges.length;\n        boolean[] visit = new boolean[n];\n\n        for (int i = 0; i < n; i++) {\n            if (!visit[i]) {\n                Map<Integer, Integer> dist = new HashMap<>();\n                dist.put(i, 1);\n                dfs(i, edges, dist, visit);\n            }\n        }\n        return answer;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-cycle-in-a-graph","has_notes":false}