{"id":916959452,"lang":"java","lang_name":"Java","time":"5 days, 18 hours","timestamp":1679070032,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/916959452/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"53 MB","code":"//COPIED. TIME NAI\nclass TrieNode {\n    public char val;\n    public boolean isWord; \n    public TrieNode[] children = new TrieNode[26];\n    public TrieNode() {}\n    TrieNode(char c){\n        TrieNode node = new TrieNode();\n        node.val = c;\n    }\n}\n\npublic class Trie {\n    private TrieNode root;\n    public Trie() {\n        root = new TrieNode();\n        root.val = ' ';\n    }\n\n    public void insert(String word) {\n        TrieNode ws = root;\n        for(int i = 0; i < word.length(); i++){\n            char c = word.charAt(i);\n            if(ws.children[c - 'a'] == null){\n                ws.children[c - 'a'] = new TrieNode(c);\n            }\n            ws = ws.children[c - 'a'];\n        }\n        ws.isWord = true;\n    }\n\n    public boolean search(String word) {\n        TrieNode ws = root; \n        for(int i = 0; i < word.length(); i++){\n            char c = word.charAt(i);\n            if(ws.children[c - 'a'] == null) return false;\n            ws = ws.children[c - 'a'];\n        }\n        return ws.isWord;\n    }\n\n    public boolean startsWith(String prefix) {\n        TrieNode ws = root; \n        for(int i = 0; i < prefix.length(); i++){\n            char c = prefix.charAt(i);\n            if(ws.children[c - 'a'] == null) return false;\n            ws = ws.children[c - 'a'];\n        }\n        return true;\n    }\n}","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false}