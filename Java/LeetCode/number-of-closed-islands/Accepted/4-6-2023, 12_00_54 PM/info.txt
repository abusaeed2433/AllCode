{"id":928878848,"lang":"java","lang_name":"Java","time":"4Â days","timestamp":1680760854,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/928878848/","is_pending":"Not Pending","title":"Number of Closed Islands","memory":"42.3 MB","code":"class Solution {\n    private int[][] grid;\n    private boolean[][] visited;\n    private int m,n;\n\n    public int closedIsland(int[][] grid) {\n        m = grid.length;\n        n = grid[0].length;\n        this.grid = grid;\n        visited = new boolean[m][n];\n\n        int ans = 0;\n\n        for(int i=0; i<m; i++){\n            for(int j=0; j<n; j++){\n                if(grid[i][j] == 1) continue;\n                if(visited[i][j]) continue;\n                ans += bfs(i,j) ? 1 : 0;\n            }\n        }\n        return ans;\n    }\n\n    private boolean bfs(int x, int y){\n        int[] dirx = {1,0,0,-1};\n        int[] diry = {0,1,-1,0};\n        Queue<int[]> q = new LinkedList<>();\n        q.add(new int[]{x,y});\n\n        boolean isPossible = true;\n\n        while(!q.isEmpty()){\n            int[] xy = q.poll();\n\n            for(int i=0; i<4; i++){\n                x = xy[0] + dirx[i];\n                y = xy[1] + diry[i];\n                if(x < 0 || y < 0 || x >=m || y >= n){\n                    isPossible = false;\n                    continue;\n                }\n                if(grid[x][y] == 1 || visited[x][y]) continue;\n\n                visited[x][y] = true;\n                q.add(new int[]{x,y});\n            }\n        }\n        return isPossible;\n    }\n}\n\n\n","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"number-of-closed-islands","has_notes":false}