{"id":913024632,"lang":"java","lang_name":"Java","time":"1 week, 5 days","timestamp":1678510263,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/913024632/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"43.6 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private final List<Integer> list = new ArrayList<>();\n    public TreeNode sortedListToBST(ListNode head) {\n        \n        while(head != null){\n            list.add(head.val);\n            head = head.next;\n        }\n\n        if(list.isEmpty()) return null;\n        int n = list.size();\n        return bst(0,n-1);\n\n    }\n\n    private TreeNode bst(int l, int h){\n        if(l > h) return null;\n        int mid = (l+h)/2;\n        TreeNode root = new TreeNode(list.get(mid));\n        root.left = bst(l,mid-1);\n        root.right = bst(mid+1,h);\n        return root;\n    }\n\n}","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree","has_notes":false}