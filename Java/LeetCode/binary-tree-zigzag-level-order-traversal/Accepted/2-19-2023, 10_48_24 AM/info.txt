{"id":900754905,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1676782104,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/900754905/","is_pending":"Not Pending","title":"Binary Tree Zigzag Level Order Traversal","memory":"41.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        if(root == null) return new ArrayList<>();\n\n        List< List<Integer> > list = new ArrayList<>();\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n        \n        List<Integer> tmp = new ArrayList<>();\n//        tmp.add(root.val);\n        boolean rightToLeft = false;\n\n        while(!queue.isEmpty()){\n            int size = queue.size();\n\n            tmp = new ArrayList<>();\n\n            while(size-- >0){\n                TreeNode nd = queue.remove();\n                if(nd == null) continue;\n                queue.add(nd.left);\n                queue.add(nd.right);\n                tmp.add(nd.val);\n            }\n            if(rightToLeft){\n                Collections.reverse(tmp);\n            }\n            rightToLeft = !rightToLeft;\n            if(!tmp.isEmpty()) list.add(tmp);\n        }\n        return list;\n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"binary-tree-zigzag-level-order-traversal","has_notes":false}