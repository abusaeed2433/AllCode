{"id":930161731,"lang":"java","lang_name":"Java","time":"1 day, 16 hours","timestamp":1680962479,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/930161731/","is_pending":"Not Pending","title":"Clone Graph","memory":"43 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public Node cloneGraph(Node node) {\n        if(node == null) return null;\n\n        Node nd = new Node(node.val);\n\n        List<Node> list = new ArrayList<>();\n        for(int i=1; i<=100; i++){\n            if(i == node.val){\n                list.add(nd);\n                continue;\n            }\n            list.add(new Node(i));\n        }\n\n        Queue<Node> q = new LinkedList<>();\n        q.add(node);\n\n        boolean[] visited = new boolean[101];\n        //visited[node.val] = true;\n\n\n        while(!q.isEmpty()){\n            Node tmp = q.poll();\n            visited[tmp.val] = true;\n            for(Node nde : tmp.neighbors){\n                if(!visited[nde.val]) {\n                    q.add(nde);\n                }\n                if(!list.get(tmp.val-1).neighbors.contains(list.get(nde.val-1))){\n                    list.get(tmp.val-1).neighbors.add(list.get(nde.val-1));\n                }\n            }\n        }\n\n        return nd;\n\n    }\n\n}\n\n","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false}