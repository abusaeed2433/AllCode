{"id":914801035,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1678770387,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/914801035/","is_pending":"Not Pending","title":"Sum Root to Leaf Numbers","memory":"40.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private StringBuilder sb = new StringBuilder();\n    private int ans = 0;\n    public int sumNumbers(TreeNode root) {\n        dfs(root);\n        return ans;\n    }\n\n    private void dfs(TreeNode root){\n        if(root.left == null && root.right == null){\n            sb.append(root.val);\n            //System.out.println(sb.toString());\n            ans += Integer.valueOf(sb.toString());\n            sb.setLength(sb.length()-1);\n            return;\n        }\n        sb.append(root.val);\n        if(root.left != null) dfs(root.left);\n        if(root.right != null) dfs(root.right);\n        sb.setLength(sb.length()-1);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-root-to-leaf-numbers","has_notes":false}