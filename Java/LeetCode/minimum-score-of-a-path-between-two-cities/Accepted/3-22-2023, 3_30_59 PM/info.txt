{"id":920030376,"lang":"java","lang_name":"Java","time":"1 day, 1 hour","timestamp":1679477459,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/920030376/","is_pending":"Not Pending","title":"Minimum Score of a Path Between Two Cities","memory":"110.6 MB","code":"class Solution {\n    private ArrayList<ArrayList<Pair>> dist;\n    private boolean[] visited;\n    public int minScore(int n, int[][] roads) {\n        dist = new ArrayList<>();\n        for(int i=0;i<n;i++){\n            dist.add(new ArrayList<>());\n        }\n        this.visited = new boolean[n];\n\n        for(int[] road : roads){\n            int a = road[0]-1;\n            int b = road[1]-1;\n            int d = road[2];\n            \n            dist.get(a).add(new Pair(b,d));\n            dist.get(b).add(new Pair(a,d));\n        }\n\n        return bfs(0);\n    }\n\n    private int bfs(int sIndex){\n        \n        int ans = Integer.MAX_VALUE;\n\n        Queue<Pair> q = new LinkedList<>();\n        q.add(new Pair(0,Integer.MAX_VALUE));\n\n        while(!q.isEmpty()){\n            int size = q.size();\n\n            while(size-- > 0){\n                Pair tmp = q.poll();\n                \n                if(visited[tmp.v])continue;\n\n                for(Pair p : dist.get(tmp.v)){\n                    if(visited[p.v]) continue;\n                    q.add(p);\n                    ans = Math.min(ans,p.d);\n                }\n                \n                visited[tmp.v] = true;\n            }\n\n        }\n        return ans;\n    }\n\n    static class Pair{\n        public int v,d;\n        public Pair(int v, int d){\n            this.v = v;\n            this.d = d;\n        }\n    }\n\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"minimum-score-of-a-path-between-two-cities","has_notes":false}