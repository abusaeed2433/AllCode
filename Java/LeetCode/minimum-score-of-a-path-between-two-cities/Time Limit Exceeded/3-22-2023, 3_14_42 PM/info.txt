{"id":920023614,"lang":"java","lang_name":"Java","time":"1 day, 1 hour","timestamp":1679476482,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/920023614/","is_pending":"Not Pending","title":"Minimum Score of a Path Between Two Cities","memory":"N/A","code":"class Solution {\n    private ArrayList<ArrayList<Pair>> dist;\n    private int n,ans;\n    private boolean[] visited;\n    public int minScore(int n, int[][] roads) {\n        dist = new ArrayList<>();\n        for(int i=0;i<n;i++){\n            dist.add(new ArrayList<>());\n        }\n        this.n = n-1;\n        this.visited = new boolean[n];\n\n        for(int[] road : roads){\n            int a = road[0]-1;\n            int b = road[1]-1;\n            int d = road[2];\n            \n            dist.get(a).add(new Pair(b,d));\n            dist.get(b).add(new Pair(a,d));\n        }\n\n        ans = Integer.MAX_VALUE;\n        dfs(0,Integer.MAX_VALUE);\n        return ans;\n    }\n\n    private void dfs(int sIndex,int d){\n        if(sIndex == n){\n            ans = Math.min(ans,d);\n            visited[sIndex] = false;\n            return;\n        }\n        \n        if(dist.get(sIndex) == null) return;\n\n        visited[sIndex] = true;        \n        for(Pair p : dist.get(sIndex)){\n            if(visited[p.v]) continue;\n            d = Math.min(p.d,d);\n            dfs(p.v,d);\n        }\n        visited[sIndex] = false;\n    }\n\n    static class Pair{\n        public int v,d;\n        public Pair(int v, int d){\n            this.v = v;\n            this.d = d;\n        }\n    }\n\n}","compare_result":"11111111111111111111111111100000000000000","title_slug":"minimum-score-of-a-path-between-two-cities","has_notes":false}