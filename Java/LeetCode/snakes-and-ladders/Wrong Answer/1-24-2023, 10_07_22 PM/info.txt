{"id":884452275,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1674576442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/884452275/","is_pending":"Not Pending","title":"Snakes and Ladders","memory":"N/A","code":"class Solution {\n    public int snakesAndLadders(int[][] board) {\n        int n = board.length;\n        int grid = n*n;\n        \n        Node[] nodes = new Node[grid+1];\n        for(int i=0;i<=grid;i++){\n            nodes[i] = new Node();\n        }\n        int ans = 0;\n        ArrayList<Integer> arr = new ArrayList<>();\n        arr.add(1);\n        nodes[1].dist = 0;\n\n        int i,j, tmp;\n        while( !arr.isEmpty() ){\n            tmp = arr.get(0);\n            i = n-1-(tmp-1)/n;\n            j = ((tmp-1)/n)%2 == 0 ? (tmp-1)%n : n-1-(tmp-1)%n;\n\n            int next = board[i][j];\n            if( next != -1 ){\n                if(!nodes[next].visited){\n                    arr.add(next);\n                    nodes[ next ].visited = true;\n                    nodes[ next ].dist = nodes[tmp].dist;\n                }\n                else{\n                    arr.remove(0);\n                    continue;\n                }\n            }\n\n            for(int k=tmp+1; k<= Math.min(arr.get(0)+6,grid); k++){\n                i = n-1-(k-1)/n;\n                j = ((k-1)/n)%2 == 0 ? (k-1)%n : n-1-(k-1)%n;\n\n//                System.out.println(tmp);\n\n                if( !nodes[k].visited){\n                    //System.out.println(k+\" - \"+nodes[k].dist);\n                    \n                    arr.add(k);\n                    nodes[k].dist = Math.min(\n                            nodes[arr.get(0)].dist+1,\n                            nodes[k].dist\n                        );\n                }\n            }\n            \n            nodes[ arr.get(0) ].visited = true;\n\n            arr.remove(0);\n\n            for(i=1;i<=grid;i++){\n                System.out.print(nodes[i].dist+\" \");\n            }\n            System.out.println(\"\");\n            \n        }\n \n        \n        //System.out.println(\"\");\n        if(nodes[grid].dist == Integer.MAX_VALUE)\n            return -1;        \n        return nodes[grid].dist;\n    }\n}\n\nclass Node{\n    public boolean visited;\n    public int dist = Integer.MAX_VALUE;\n}\n\n\n","compare_result":"111111111111111111111101111101110100110111111111110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"snakes-and-ladders","has_notes":false}