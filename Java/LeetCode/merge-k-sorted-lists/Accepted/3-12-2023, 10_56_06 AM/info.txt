{"id":913612779,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1678596966,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/913612779/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"43.9 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        List<ListNode> list = new ArrayList<>();\n        for(ListNode head : lists){\n            while(head != null){\n                list.add(head);\n                head = head.next;\n            }\n        }\n\n        Collections.sort(list,new Comparator<ListNode>(){\n            public int compare(ListNode nd1, ListNode nd2){\n                return nd1.val - nd2.val;\n            }\n        });\n        \n        if(list.isEmpty()) return null;\n        int n = list.size();\n        for(int i=0; i<n-1;i++){\n            list.get(i).next = list.get(i+1);\n        }\n        list.get(n-1).next = null;\n        return list.get(0);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false}