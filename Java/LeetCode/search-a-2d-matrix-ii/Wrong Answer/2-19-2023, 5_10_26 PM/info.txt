{"id":900916368,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1676805026,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/900916368/","is_pending":"Not Pending","title":"Search a 2D Matrix II","memory":"N/A","code":"class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        \n        int i = 0, j = 0, m = matrix.length, n = matrix[0].length;\n\n        while(i<m && j<n){\n            if(matrix[i][j] == target) return true;\n            if(matrix[i][j] > target) return false;\n\n            if(i == m-1 && j==n-1) return false;\n            int ii = 0, ji = 0;\n\n            if(i < m-1) {\n                if(matrix[i+1][j] == target) return true;\n\n                if(matrix[i+1][j] < target) ii = 1;\n            }\n\n            if(j < n-1){\n                if(matrix[i][j+1] == target) return true;\n                if(matrix[i][j+1] < target) ji = 1;\n            }\n            \n            if(ii==0 && ji == 0) return false;\n\n            i += ii;\n            j += ji;\n\n            //System.out.println(i+\", \"+j);\n        }\n\n        return false;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111110111111111101111111111110111111110101111101001011111111011010100","title_slug":"search-a-2d-matrix-ii","has_notes":false}