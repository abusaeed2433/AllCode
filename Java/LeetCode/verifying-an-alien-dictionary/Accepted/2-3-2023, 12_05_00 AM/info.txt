{"id":890226219,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1675361100,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/890226219/","is_pending":"Not Pending","title":"Verifying an Alien Dictionary","memory":"41 MB","code":"class Solution {\n    int[] indices = new int[26];\n\n    public boolean isAlienSorted(String[] words, String order) {\n        int n = order.length();\n\n        \n\n        for(int i=0;i<n;i++)\n            indices[ order.charAt(i) - 97] = i;\n        \n        \n        for(int i=0;i<words.length;i++){\n            \n            for(int j=i+1;j<words.length;j++){\n                if(!isValid(words[i],words[j])) return false;\n            }\n            \n\n        }\n\n        return true;\n\n    }\n\n    private boolean isValid(String s, String t){\n        int min = Math.min(s.length(),t.length());\n\n        for(int i=0;i<min;i++){\n            if(indices[s.charAt(i)-97] < indices[t.charAt(i)-97]) return true;\n            if(indices[s.charAt(i)-97] > indices[t.charAt(i)-97]) \n                        return false;      \n        }\n\n        return s.length() <= t.length();\n\n    }\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"verifying-an-alien-dictionary","has_notes":false}