{"id":921426151,"lang":"java","lang_name":"Java","time":"5 days, 21 hours","timestamp":1679679216,"status":10,"status_display":"Accepted","runtime":"77 ms","url":"/submissions/detail/921426151/","is_pending":"Not Pending","title":"Reorder Routes to Make All Paths Lead to the City Zero","memory":"68.9 MB","code":"class Solution {\n    private Map<Integer,List<Integer>> map = new HashMap<>();\n    private int ans = 0;\n    private boolean[] visited;\n\n    public int minReorder(int n, int[][] connections) {\n        visited = new boolean[n];\n        for(int[] conn : connections){\n            map.computeIfAbsent(conn[0],v->{\n                return new ArrayList<>();\n            }).add(conn[1]);\n\n            map.computeIfAbsent(conn[1],v->{\n                return new ArrayList<>();\n            }).add(-conn[0]);\n\n        }\n\n        dfs(0);\n        return ans;\n    }\n    \n    private void dfs(int sIndex){\n        visited[sIndex] = true;\n        List<Integer> adj = map.get(sIndex);\n        for(int node : adj){\n            if(visited[Math.abs(node)]) continue;\n            if(node >= 0){\n                //System.out.println(sIndex +\" \"+node);\n                ans++;\n            }\n            else{\n                node *= -1;\n            }\n            dfs(node);\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reorder-routes-to-make-all-paths-lead-to-the-city-zero","has_notes":false}