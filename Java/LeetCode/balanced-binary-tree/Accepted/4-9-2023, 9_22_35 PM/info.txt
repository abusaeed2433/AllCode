{"id":930786773,"lang":"java","lang_name":"Java","time":"14 hours, 43 minutes","timestamp":1681053755,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/930786773/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"42.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    //private int mn = Integer.MAX_VALUE, mx = Integer.MIN_VALUE;\n\n    public boolean isBalanced(TreeNode root) {\n        if(root == null) return true;\n\n        Queue<TreeNode> q = new LinkedList<>();\n        q.add(root);\n\n        while(!q.isEmpty()){\n            TreeNode tmp = q.poll();\n\n            if(Math.abs(dfs(tmp.left,0) - dfs(tmp.right,0)) > 1) return false;\n            if(tmp.left != null) q.add(tmp.left);\n            if(tmp.right != null) q.add(tmp.right);\n        }\n\n        return true;\n    }\n\n    private int dfs(TreeNode root, int d){\n        \n        if(root == null) return d;\n        if(root.left == null && root.right == null){\n            return d+1;\n        }\n        \n        return Math.max(dfs(root.left,d+1), dfs(root.right,d+1));\n    }\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false}