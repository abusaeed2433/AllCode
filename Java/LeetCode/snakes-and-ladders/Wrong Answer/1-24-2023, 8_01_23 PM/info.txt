{"id":884384860,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1674568883,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/884384860/","is_pending":"Not Pending","title":"Snakes and Ladders","memory":"N/A","code":"class Solution {\n    public int snakesAndLadders(int[][] board) {\n        int n = board.length;\n        int grid = n*n;\n        \n        Node[] nodes = new Node[grid+1];\n        for(int i=0;i<=grid;i++){\n            nodes[i] = new Node();\n        }\n        int ans = 0;\n        ArrayList<Integer> arr = new ArrayList<>();\n        arr.add(1);\n\n        int i,j, tmp;\n        while( !arr.isEmpty() ){\n            tmp = arr.get(0);\n            i = n-1-(tmp-1)/n;\n            j = ((tmp-1)/n)%2 == 0 ? (tmp-1)%n : n-1-(tmp-1)%n;\n\n            if(nodes[grid].visited)\n                return nodes[grid].dist;            \n\n            int next = board[i][j];\n            if( next != -1 && !nodes[next].visited ){\n                arr.add(next);\n                nodes[ next ].visited = true;\n                nodes[ next ].dist = nodes[tmp].dist;\n            }\n\n            for(int k=tmp+1; k<= Math.min(arr.get(0)+6,grid); k++){\n                i = n-1-(k-1)/n;\n                j = ((k-1)/n)%2 == 0 ? (k-1)%n : n-1-(k-1)%n;\n\n//                System.out.println(tmp);\n\n                if( !nodes[k].visited){\n                    arr.add(k);\n                    nodes[ k ].visited = true;\n                    nodes[k].dist = nodes[arr.get(0)].dist+1;\n                }\n            }\n            arr.remove(0);\n        }\n        return -1;\n    }\n}\n\nclass Node{\n    public boolean visited;\n    public int dist = 0;\n}\n\n\n","compare_result":"111101001011111111111101111001111011110111111111110101111111101111010111111101101101110111101111110111111111111111111111011111101111111100110111001101101110111011111111111101110011111101111111001111111111010101100","title_slug":"snakes-and-ladders","has_notes":false}