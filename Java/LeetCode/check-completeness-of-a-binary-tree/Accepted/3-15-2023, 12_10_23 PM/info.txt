{"id":915464697,"lang":"java","lang_name":"Java","time":"1 week, 1 day","timestamp":1678860623,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/915464697/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"42.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isCompleteTree(TreeNode root) {\n        return bfs(root);\n    }\n\n    private boolean bfs(TreeNode root){\n        if(root == null ) return true;\n\n        Queue<TreeNode> q = new LinkedList<>();\n        q.add(root);\n        boolean hasFound = false;\n        while(!q.isEmpty()){\n            int size = q.size();\n            int total = size;\n\n            while(size-- > 0){\n\n                TreeNode tmp = q.poll();\n                if(hasFound && (tmp.left != null || tmp.right != null)){\n                    return false;\n                }\n\n                if(tmp.left != null){\n                    q.add(tmp.left);\n                    total--;\n                }\n                else{\n                    hasFound = true;\n                }                \n\n                if(tmp.right != null){\n                    if(hasFound) return false;\n                    q.add(tmp.right);\n                    total--;\n                }\n                else{\n                    hasFound = true;\n                }         \n            }\n        }\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree","has_notes":false}