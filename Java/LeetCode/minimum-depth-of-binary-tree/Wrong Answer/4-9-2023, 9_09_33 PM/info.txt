{"id":930781368,"lang":"java","lang_name":"Java","time":"14 hours, 56 minutes","timestamp":1681052973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/930781368/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private int ans = Integer.MAX_VALUE;\n    public int minDepth(TreeNode root) {\n        dfs(root,0);\n        return ans;\n    }\n\n    private void dfs(TreeNode root, int d){\n        if(root == null) return;\n        if(root.left == null && root.right == null){\n            ans = Math.min(ans,d+1);\n            return;\n        }\n        \n        dfs(root.left,d+1);\n        dfs(root.right,d+1);\n    }\n\n}","compare_result":"1101111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree","has_notes":false}