{"id":894548497,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1675926604,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/894548497/","is_pending":"Not Pending","title":"First Unique Character in a String","memory":"42.3 MB","code":"class Solution {\n    public int firstUniqChar(String s) {\n\n        Node[] map = new Node[26];\n\n        for(int i=0; i<26; i++){\n            map[i] = new Node();\n        }            \n\n        for(int i=0; i<s.length(); i++){\n            map[ s.charAt(i)-97 ].process(i,s.charAt(i));\n        }\n\n        Arrays.sort(map);\n\n        for(Node nd : map){\n            if(nd.fPos == -1) continue;\n            if(nd.count == 1) return nd.fPos;\n        }\n\n        return -1;        \n    }\n\n    class Node implements Comparable<Node>{\n        public int count = 0, fPos = -1;\n        public Character ch;\n\n        public void process(int index,char ch){\n            if(fPos == -1) fPos = index;\n            this.ch = ch;\n            count++;\n        }\n        \n        @Override\n        public int compareTo(Node node){\n            return fPos - node.fPos;\n        }\n    }\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"first-unique-character-in-a-string","has_notes":false}