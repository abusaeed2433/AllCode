{"id":888741205,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1675169758,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/888741205/","is_pending":"Not Pending","title":"Optimal Partition of String","memory":"N/A","code":"class Solution {\n\n    int[] map = new int[26];\n\n    public int partitionString(String s) {\n        int ans = 1, prev = 0;\n        resetMap();\n\n        for(int i=0;i<s.length();i++){\n            if(map[s.charAt(i)-97] != -1){\n\n                System.out.println(s.charAt(i)+\" \"+i);\n            \n                ans++;            \n                int tmp = map[ s.charAt(i)-97 ] + 1;\n                \n                resetMap();\n                while(tmp <= i){\n                    map[ s.charAt(tmp)-97 ] = tmp;\n                    tmp++;\n                }\n            }\n            else{\n                map[ s.charAt(i)-97 ] = i;\n            }\n        }\n\n        return ans;\n    }\n\n    private void resetMap(){\n            for(int i=0;i<26;i++) map[i] = -1;\n    }\n}","compare_result":"11111000111100000000000000000000000000000000000111000000011","title_slug":"optimal-partition-of-string","has_notes":false}