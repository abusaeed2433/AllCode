{"id":920033353,"lang":"java","lang_name":"Java","time":"1 day, 1 hour","timestamp":1679477912,"status":10,"status_display":"Accepted","runtime":"208 ms","url":"/submissions/detail/920033353/","is_pending":"Not Pending","title":"Minimum Score of a Path Between Two Cities","memory":"94.4 MB","code":"class Solution {\n    private Map<Integer,List<Pair>> adj = new HashMap<>();\n    private boolean[] visited;\n    public int minScore(int n, int[][] roads) {        \n        this.visited = new boolean[n];\n\n        for(int[] road : roads){\n            int a = road[0]-1, b = road[1]-1, d = road[2];\n\n            adj.computeIfAbsent(a, k->{\n                return new ArrayList<Pair>();\n            }).add(new Pair(b,d));\n\n            adj.computeIfAbsent(b, k-> new ArrayList<Pair>())\n                .add(new Pair(a,d));                        \n        }\n\n        return bfs(0);\n    }\n\n    private int bfs(int sIndex){\n        \n        int ans = Integer.MAX_VALUE;\n\n        Queue<Pair> q = new LinkedList<>();\n        q.add(new Pair(0,Integer.MAX_VALUE));\n\n        while(!q.isEmpty()){\n            int size = q.size();\n\n            while(size-- > 0){\n                Pair tmp = q.poll();\n                visited[tmp.v] = true;\n\n                for(Pair p : adj.get(tmp.v)){\n                    if(visited[p.v]) continue;\n                    q.add(p);\n                }\n                ans = Math.min(ans,tmp.d);\n            }\n\n        }\n        return ans;\n    }\n\n    static class Pair{\n        public int v,d;\n        public Pair(int v, int d){\n            this.v = v;\n            this.d = d;\n        }\n    }\n\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"minimum-score-of-a-path-between-two-cities","has_notes":false}