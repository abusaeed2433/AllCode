{"id":906915758,"lang":"java","lang_name":"Java","time":"3 weeks, 1 day","timestamp":1677648211,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/906915758/","is_pending":"Not Pending","title":"Sort an Array","memory":"N/A","code":"class Solution {\n    private int[] arr;\n    public int[] sortArray(int[] nums) {\n        arr = nums;\n        quickSort(0,nums.length-1);\n        return nums;\n    }\n \n    void swap(int i, int j)\n    {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n \n    int partition(int low, int high)\n    {\n \n        int pivot = arr[high];\n        int i = (low - 1);\n \n        for (int j = low; j < high; j++) {\n \n            if (arr[j] < pivot) {\n                i++;\n                swap(i, j);\n            }\n        }\n        swap(i + 1, high);\n        return (i + 1);\n    }\n \n    void quickSort(int low, int high)\n    {\n        if (low < high) {\n            int pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n        }\n    }\n}","compare_result":"1111111111111100000","title_slug":"sort-an-array","has_notes":false}