{"id":905817324,"lang":"java","lang_name":"Java","time":"3 weeks, 3 days","timestamp":1677492358,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/905817324/","is_pending":"Not Pending","title":"Construct Quad Tree","memory":"43.3 MB","code":"/*\n// Definition for a QuadTree node.\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n\n    \n    public Node() {\n        this.val = false;\n        this.isLeaf = false;\n        this.topLeft = null;\n        this.topRight = null;\n        this.bottomLeft = null;\n        this.bottomRight = null;\n    }\n    \n    public Node(boolean val, boolean isLeaf) {\n        this.val = val;\n        this.isLeaf = isLeaf;\n        this.topLeft = null;\n        this.topRight = null;\n        this.bottomLeft = null;\n        this.bottomRight = null;\n    }\n    \n    public Node(boolean val, boolean isLeaf, Node topLeft, Node topRight, Node bottomLeft, Node bottomRight) {\n        this.val = val;\n        this.isLeaf = isLeaf;\n        this.topLeft = topLeft;\n        this.topRight = topRight;\n        this.bottomLeft = bottomLeft;\n        this.bottomRight = bottomRight;\n    }\n};\n*/\n\nclass Solution {\n    private int[][] grid;\n    public Node construct(int[][] grid) {\n        this.grid = grid;\n        Node node = new Node(true,false);\n        \n        int n = grid.length;\n\n        add(node,0,n,0,n);\n        return node;\n    }\n    private void add(Node parent, int rs,int re,int cs,int ce){\n\n        if(isAllSame(rs,re,cs,ce)){\n            parent.isLeaf = true;\n            parent.val = (grid[rs][cs]==1);\n            return;\n        }\n        \n        int m1 = (re-rs)/2;\n        int m2 = (ce-cs)/2;\n\n        //System.out.println(rs+\" \"+re+\" \"+cs+\" \"+ce+\" \"+m1+\" \"+m2);\n        //topLeft\n        //System.out.println(\"topLeft\");\n        boolean val = grid[rs][cs]==1;\n        if(isAllSame(rs,rs+m1,cs,cs+m2)){\n            parent.topLeft = new Node(val,true);\n        }\n        else{\n            parent.topLeft = new Node(val,false);\n            add(parent.topLeft,rs,rs+m1,cs,cs+m2);            \n        }\n\n        //topRight\n//        System.out.println(rs+\" \"+(rs+m1)+\" \"+(cs+m2)+\" \"+ce);\n        val = grid[rs][cs+m2]==1;\n        //System.out.println(\"topRight\");\n        if(isAllSame(rs,rs+m1,cs+m2,ce)){\n            parent.topRight = new Node(val,true);\n        }\n        else{\n            parent.topRight = new Node(val,false);\n            add(parent.topRight,rs,rs+m1,cs+m2,ce);\n        }\n\n        //bottomLeft\n        //System.out.println(\"bottomLeft\");\n        val = grid[rs+m1][cs]==1;\n        if(isAllSame(rs+m1,re,cs,cs+m2)){\n            parent.bottomLeft = new Node(val,true);\n        }\n        else{\n            parent.bottomLeft = new Node(val,false);\n            add(parent.bottomLeft,rs+m1,re,cs,cs+m2);\n        }\n\n        //bottomRight\n        val = grid[rs+m1][cs+m2]==1;\n        //System.out.println(\"bottomRight\");\n        if(isAllSame(rs+m1,re,cs+m2,ce)){\n            parent.bottomRight = new Node(val,true);\n        }\n        else{\n            parent.bottomRight = new Node(val,false);\n            add(parent.bottomRight,rs+m1,re,cs+m2,ce);\n        }\n        \n    }\n\n    private boolean isAllSame(int rs,int re, int cs, int ce){\n        int tmp = grid[rs][cs];\n        for(int i=rs;i<re;i++){\n            for(int j=cs;j<ce;j++){\n                if(grid[i][j] != tmp){\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n}","compare_result":"1111111111111111111111","title_slug":"construct-quad-tree","has_notes":false}