{"id":903387341,"lang":"java","lang_name":"Java","time":"4Â weeks","timestamp":1677138127,"status":10,"status_display":"Accepted","runtime":"120 ms","url":"/submissions/detail/903387341/","is_pending":"Not Pending","title":"IPO","memory":"109.5 MB","code":"//FULLY COPY PASTE. DON'T HAVE ANY TIME RIGHT NOW\nclass Solution {\n    class Project implements Comparable<Project> {\n        int capital, profit;\n\n        public Project(int capital, int profit) {\n            this.capital = capital;\n            this.profit = profit;\n        }\n\n        public int compareTo(Project project) {\n            return capital - project.capital;\n        }\n    }\n\n    public int findMaximizedCapital(int k, int w, int[] profits, int[] capital) {\n        int n = profits.length;\n        Project[] projects = new Project[n];\n        for (int i = 0; i < n; i++) {\n            projects[i] = new Project(capital[i], profits[i]);\n        }\n        Arrays.sort(projects);\n        // PriorityQueue is a min heap, but we need a max heap, so we use\n        // Collections.reverseOrder()\n        PriorityQueue<Integer> q = new PriorityQueue<Integer>(n, Collections.reverseOrder());\n        int ptr = 0;\n        for (int i = 0; i < k; i++) {\n            while (ptr < n && projects[ptr].capital <= w) {\n                q.add(projects[ptr++].profit);\n            }\n            if (q.isEmpty()) {\n                break;\n            }\n            w += q.poll();\n        }\n        return w;\n    }\n}","compare_result":"11111111111111111111111111111111111","title_slug":"ipo","has_notes":false}