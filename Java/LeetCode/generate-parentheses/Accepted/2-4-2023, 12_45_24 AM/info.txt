{"id":890861959,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1675449924,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/890861959/","is_pending":"Not Pending","title":"Generate Parentheses","memory":"42.1 MB","code":"class Solution {\n\n    private StringBuilder sb = new StringBuilder();\n    private int n;\n    private List<String> list = new ArrayList<>();\n\n    public List<String> generateParenthesis(int n) {\n        this.n = n;\n        backTrack(0,0);\n        return list;\n    }\n\n    private void backTrack(int lb, int rb){//left bracket, right bracket\n\n        if(rb > lb) {\n            \n            return;\n        }\n        \n        if(lb == n && rb == n) {\n            list.add(sb.toString());\n            //sb.setLength(sb.length()-1); //removing last one\n            return;\n        }\n\n        \n        if(lb < n)\n        {\n            sb.append('(');\n            backTrack(lb+1,rb);\n            sb.setLength(sb.length()-1);\n        }\n\n        if(rb < n){\n            sb.append(')');\n            backTrack(lb,rb+1); \n            sb.setLength(sb.length()-1);       \n        }\n        \n    }\n\n}","compare_result":"11111111","title_slug":"generate-parentheses","has_notes":false}