{"id":906333062,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1677565874,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/906333062/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private Map<String,Integer> map = new HashMap<>();\n    private List<TreeNode> ans = new LinkedList<>();\n    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {\n        traverse(root);\n        return ans;\n    }\n    \n    private String traverse(TreeNode root) {\n        if (root == null) return \"#\";\n\n        String lTree = traverse(root.left);\n        String rTree = traverse(root.right);\n        String tree = lTree + \",\" +root.val+ \",\" + rTree;\n\n        int count = map.getOrDefault(tree, 0);            \n        map.put(tree, count+1);\n        if (count == 1) ans.add(root);\n        return tree;\n    }\n    \n}","compare_result":"1111011011111111111001111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111110111111111101011111111111111000010110010100110110000000100010","title_slug":"find-duplicate-subtrees","has_notes":false}