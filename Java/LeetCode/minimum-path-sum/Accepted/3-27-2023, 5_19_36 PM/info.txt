{"id":922965422,"lang":"java","lang_name":"Java","time":"3 days, 4 hours","timestamp":1679915976,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/922965422/","is_pending":"Not Pending","title":"Minimum Path Sum","memory":"45.1 MB","code":"class Solution {\n\n    private int ans = Integer.MAX_VALUE;\n    private int m,n;\n    private int[][] grid;\n    private int[][] dp;\n\n    public int minPathSum(int[][] grid) {\n        this.grid = grid;\n        m = grid.length;\n        n = grid[0].length;\n        dp = new int[m][n];\n\n        dp[0][0] = grid[0][0];\n\n        for(int r=1; r<m; r++){\n            dp[r][0] = dp[r-1][0] + grid[r][0];\n        }\n\n        for(int c=1; c<n; c++){\n            dp[0][c] = dp[0][c-1] + grid[0][c];\n        }\n\n\n        // for(int[] arr : dp){\n        //     for(int d : arr){\n        //         System.out.print(d+\" \");\n        //     }\n        //     System.out.println(\"\");\n        // }\n        \n        for(int r=1; r<m; r++){\n            for(int c=1; c<n; c++){\n                dp[r][c] = Math.min(dp[r-1][c],dp[r][c-1]) + grid[r][c];\n            }\n        }\n\n        return dp[m-1][n-1];\n    }\n\n\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-path-sum","has_notes":false}