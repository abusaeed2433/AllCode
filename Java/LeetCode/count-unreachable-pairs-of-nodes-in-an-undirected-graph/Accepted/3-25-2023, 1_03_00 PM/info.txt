{"id":921700685,"lang":"java","lang_name":"Java","time":"5 days, 8 hours","timestamp":1679727780,"status":10,"status_display":"Accepted","runtime":"67 ms","url":"/submissions/detail/921700685/","is_pending":"Not Pending","title":"Count Unreachable Pairs of Nodes in an Undirected Graph","memory":"128 MB","code":"class Solution {\n    private List<List<Integer>> adj = new ArrayList<>();\n    private boolean[] visited;\n\n    public long countPairs(int n, int[][] connections) {\n        int cables = connections.length;\n        visited = new boolean[n];\n\n        for(int i=0;i<n;i++){\n            adj.add(new ArrayList<>());\n        }\n\n        for(int[] cbl : connections){\n            adj.get(cbl[0]).add(cbl[1]);\n            adj.get(cbl[1]).add(cbl[0]);\n        }\n        \n        List<Long> arr = new ArrayList<>();\n        for(int i=0;i<n;i++){\n            if(visited[i]) continue;\n            arr.add(dfs(i,0));\n        }\n        long ans = 0;\n        long prev = arr.get(0);\n        for(int i=1; i<arr.size();i++){\n            ans += arr.get(i) * prev;\n            prev += arr.get(i);\n        }\n        return ans;\n    }\n\n    private long dfs(int sIndex,long ans){\n        ans++;\n        visited[sIndex] = true;\n        for(int pc : adj.get(sIndex)){\n            if(visited[pc]) continue;\n            visited[pc] = true;\n            ans += dfs(pc,0);\n        }\n        return ans;\n    }\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-unreachable-pairs-of-nodes-in-an-undirected-graph","has_notes":false}