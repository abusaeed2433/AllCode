{"id":906917160,"lang":"java","lang_name":"Java","time":"3 weeks, 1 day","timestamp":1677648384,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/906917160/","is_pending":"Not Pending","title":"Sort an Array","memory":"53.3 MB","code":"class Solution {\n    private int[] arr;\n    public int[] sortArray(int[] nums) {\n        arr = nums;\n        sort(0,nums.length-1);\n        return nums;\n    }\n \n     void merge(int l, int m, int r)\n    {\n        int n1 = m - l + 1;\n        int n2 = r - m;\n\n        int L[] = new int[n1];\n        int R[] = new int[n2];\n  \n        for (int i = 0; i < n1; ++i)\n            L[i] = arr[l + i];\n        for (int j = 0; j < n2; ++j)\n            R[j] = arr[m + 1 + j];\n\n        int i = 0, j = 0;\n        int k = l;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                arr[k] = L[i];\n                i++;\n            }\n            else {\n                arr[k] = R[j];\n                j++;\n            }\n            k++;\n        }  \n        while (i < n1) {\n            arr[k] = L[i];\n            i++;\n            k++;\n        }\n        while (j < n2) {\n            arr[k] = R[j];\n            j++;\n            k++;\n        }\n    }  \n    void sort(int l, int r)\n    {\n        if (l < r) {\n            int m = l + (r - l) / 2;\n            sort(l, m);\n            sort(m + 1, r);\n            merge(l, m, r);\n        }\n    }\n}","compare_result":"1111111111111111111","title_slug":"sort-an-array","has_notes":false}