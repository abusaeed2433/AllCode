{"id":930544954,"lang":"java","lang_name":"Java","time":"1Â day","timestamp":1681018101,"status":10,"status_display":"Accepted","runtime":"120 ms","url":"/submissions/detail/930544954/","is_pending":"Not Pending","title":"Largest Color Value in a Directed Graph","memory":"133.3 MB","code":"class Solution {\r\n    public int largestPathValue(String colors, int[][] edges) {\r\n        int n = colors.length();\r\n        int inc = 0;\r\n        \r\n        Map<Integer, List<Integer> > adj = new HashMap<>();\r\n\r\n        int[] indeg = new int[n];\r\n\r\n        for(int[] edge : edges){\r\n            adj.computeIfAbsent(edge[0], k->{\r\n                return new ArrayList<Integer>();\r\n            }).add(edge[1]);\r\n            indeg[edge[1]]++;\r\n        }\r\n\r\n        int[][] count = new int[n][26];\r\n\r\n        Queue<Integer> q = new LinkedList<>();\r\n\r\n        for(int i=0; i<n; i++){\r\n            if(indeg[i] == 0){\r\n                q.add(i);\r\n            }\r\n        }\r\n\r\n        int ans = 1, seen = 0;\r\n\r\n        while(!q.isEmpty()){\r\n            int node = q.poll();\r\n            seen++;\r\n\r\n            count[node][ colors.charAt(node)-'a' ]++;\r\n            ans = Math.max(count[node][colors.charAt(node)-'a'],ans);\r\n\r\n            if(!adj.containsKey(node)) continue;\r\n\r\n            for(int ngh : adj.get(node)){\r\n                for(int i=0; i<26; i++){\r\n                    count[ngh][i] = Math.max(count[ngh][i],count[node][i]);\r\n                }\r\n                if( --indeg[ngh] <= 0) {\r\n                    q.add(ngh);\r\n                    // System.out.println(inc + \" --> \"+ngh);\r\n                    // inc++;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        return seen < n ? -1 : ans;\r\n\r\n\r\n\r\n\r\n    }\r\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-color-value-in-a-directed-graph","has_notes":false}