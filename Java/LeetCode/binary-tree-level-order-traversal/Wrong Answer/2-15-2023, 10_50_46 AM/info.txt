{"id":898253782,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1676436646,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/898253782/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List< List<Integer> > ans = new ArrayList<>();\n\n        if(root == null) return ans;\n\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n\n        List<Integer> tmp = new ArrayList<>();\n        tmp.add(root.val);\n\n        ans.add(tmp);\n\n        while(!queue.isEmpty()){\n            tmp = new ArrayList<>();\n            TreeNode nd = queue.remove();\n\n            if(nd.left != null){\n                queue.add(nd.left);\n                tmp.add(nd.left.val);\n            }\n\n            if(nd.right != null){\n                queue.add(nd.right);\n                tmp.add(nd.right.val);\n            }\n\n            if(!tmp.isEmpty())\n                ans.add(tmp);\n            \n        }\n\n        return ans;\n\n\n    }\n}","compare_result":"1111111011011010000010000001000001","title_slug":"binary-tree-level-order-traversal","has_notes":false}