{"id":895145025,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1676007693,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/895145025/","is_pending":"Not Pending","title":"As Far from Land as Possible","memory":"N/A","code":"class Solution {\n\n    private int n,m;\n    private int[][] grid;\n\n    public int maxDistance(int[][] grid) {\n        \n        this.grid = grid;\n\n        int ans = -1;\n\n        n = grid.length;\n        m = grid[0].length;\n\n        for(int i=0; i<n; i++){            \n            for(int j=0; j<m; j++){\n                if(grid[i][j] == 1) continue;\n                ans = Math.max(ans, getMinDis(i,j));\n            }\n        }\n        \n        return ans;\n\n    }\n\n    private int getMinDis(int ii, int jj){\n        \n        int dis = Integer.MAX_VALUE;\n\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                if(grid[i][j] == 0) continue;\n                dis = Math.min(\n                    dis,\n                    Math.abs(i-ii) + Math.abs(j-jj)\n                );\n\n            }\n        }\n        //System.out.println()\n        return (dis == Integer.MAX_VALUE) ? -1 : dis;\n    }\n\n}\n\n","compare_result":"1111111111111111111111110000000000000","title_slug":"as-far-from-land-as-possible","has_notes":false}